name: Database CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  SBSC_AUDIT_DB: ${{ secrets.SBSC_AUDIT_DB }}
  SBSC_CUSTOMER_DB: ${{ secrets.SBSC_CUSTOMER_DB }}
  DB_SERVER: ${{ secrets.DB_SERVER }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  database-deployment:
    runs-on: self-hosted
    environment: development
    defaults:
      run:
        shell: powershell

    steps:
      - name: Configure Git Path
        run: |
          $gitPath = "C:\Users\spont\Git\cmd"
          $env:PATH = "$gitPath;$env:PATH"
          & "$gitPath\git.exe" --version

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Import DevOps Modules
        run: |
          Import-Module Devart.DbForge.DevOpsAutomation.SqlServer -ErrorAction Stop
          Write-Host "✓ DevOpsAutomation module loaded"

          Import-Module DevartSqlServer -Force
          Write-Host "✓ DevartSqlServer module imported successfully"

      - name: Create Database Connections
        run: |
          if ($env:DB_USERNAME -and $env:DB_PASSWORD) {
            $global:AuditConnection = New-DevartSqlDatabaseConnection -Server $env:DB_SERVER -Database $env:SBSC_AUDIT_DB -UserName $env:DB_USERNAME -Password $env:DB_PASSWORD
            $global:CustomerConnection = New-DevartSqlDatabaseConnection -Server $env:DB_SERVER -Database $env:SBSC_CUSTOMER_DB -UserName $env:DB_USERNAME -Password $env:DB_PASSWORD
          } else {
            $global:AuditConnection = New-DevartSqlDatabaseConnection -Server $env:DB_SERVER -Database $env:SBSC_AUDIT_DB -WindowsAuthentication $true
            $global:CustomerConnection = New-DevartSqlDatabaseConnection -Server $env:DB_SERVER -Database $env:SBSC_CUSTOMER_DB -WindowsAuthentication $true
          }

          Test-DevartDatabaseConnection -Connection $global:AuditConnection
          Test-DevartDatabaseConnection -Connection $global:CustomerConnection

      - name: Check Migration Files
        id: check_migrations
        run: |
          $auditCount = (Get-ChildItem -Path ".\MIGRATION\sbscAudit" -Filter "*.sql" -ErrorAction SilentlyContinue).Count
          $customerCount = (Get-ChildItem -Path ".\MIGRATION\sbscCustomer" -Filter "*.sql" -ErrorAction SilentlyContinue).Count
          echo "audit_migrations=$auditCount" >> $env:GITHUB_OUTPUT
          echo "customer_migrations=$customerCount" >> $env:GITHUB_OUTPUT

      - name: Execute Audit Migrations
        if: steps.check_migrations.outputs.audit_migrations > 0
        run: |
          $auditConnection = if ($env:DB_USERNAME) {
            New-DevartSqlDatabaseConnection -Server $env:DB_SERVER -Database $env:SBSC_AUDIT_DB -UserName $env:DB_USERNAME -Password $env:DB_PASSWORD
          } else {
            New-DevartSqlDatabaseConnection -Server $env:DB_SERVER -Database $env:SBSC_AUDIT_DB -WindowsAuthentication $true
          }
          Invoke-DevartExecuteScript -Input ".\MIGRATION\sbscAudit" -Connection $auditConnection

      - name: Execute Customer Migrations
        if: steps.check_migrations.outputs.customer_migrations > 0
        run: |
          $customerConnection = if ($env:DB_USERNAME) {
            New-DevartSqlDatabaseConnection -Server $env:DB_SERVER -Database $env:SBSC_CUSTOMER_DB -UserName $env:DB_USERNAME -Password $env:DB_PASSWORD
          } else {
            New-DevartSqlDatabaseConnection -Server $env:DB_SERVER -Database $env:SBSC_CUSTOMER_DB -WindowsAuthentication $true
          }
          Invoke-DevartExecuteScript -Input ".\MIGRATION\sbscCustomer" -Connection $customerConnection

      - name: Schema Compare and Deploy Audit
        run: |
          $auditConnection = if ($env:DB_USERNAME) {
            New-DevartSqlDatabaseConnection -Server $env:DB_SERVER -Database $env:SBSC_AUDIT_DB -UserName $env:DB_USERNAME -Password $env:DB_PASSWORD
          } else {
            New-DevartSqlDatabaseConnection -Server $env:DB_SERVER -Database $env:SBSC_AUDIT_DB -WindowsAuthentication $true
          }
          Invoke-DevartSyncDatabaseSchema -Source ".\sbscAudit" -Target $auditConnection -FilterPath ".\filters.scflt"

      - name: Schema Compare and Deploy Customer
        run: |
          $customerConnection = if ($env:DB_USERNAME) {
            New-DevartSqlDatabaseConnection -Server $env:DB_SERVER -Database $env:SBSC_CUSTOMER_DB -UserName $env:DB_USERNAME -Password $env:DB_PASSWORD
          } else {
            New-DevartSqlDatabaseConnection -Server $env:DB_SERVER -Database $env:SBSC_CUSTOMER_DB -WindowsAuthentication $true
          }
          Invoke-DevartSyncDatabaseSchema -Source ".\sbscCustomer" -Target $customerConnection -FilterPath ".\filters.scflt"

      - name: Archive Migrations
        if: steps.check_migrations.outputs.audit_migrations > 0 || steps.check_migrations.outputs.customer_migrations > 0
        run: |
          # Define Git path and add to PATH
          $gitPath = "C:\Users\spont\Git\cmd"
          $env:PATH = "$gitPath;$env:PATH"
          & "$gitPath\git.exe" --version
      
          # Setup
          $timestamp = Get-Date -Format 'yyyyMMdd_HHmmss'
          $repoUrl = "https://x-access-token:${{ secrets.GH_PUSH_TOKEN }}@github.com/${{ github.repository }}"
          $workingDir = "$env:RUNNER_TEMP\repo"
          $archiveDir = "$workingDir\MIGRATION_ARCHIVE\$timestamp"
      
          # Clone the repository using custom git
          & "$gitPath\git.exe" clone $repoUrl $workingDir
          Set-Location $workingDir
      
          # Create archive directories
          New-Item -ItemType Directory -Path "$archiveDir\sbscAudit" -Force | Out-Null
          New-Item -ItemType Directory -Path "$archiveDir\sbscCustomer" -Force | Out-Null
      
          # Move .sql files from original workspace into clone
          $sourceAudit = "$env:GITHUB_WORKSPACE\MIGRATION\sbscAudit\*.sql"
          $sourceCustomer = "$env:GITHUB_WORKSPACE\MIGRATION\sbscCustomer\*.sql"
      
          if (Test-Path $sourceAudit) {
            Move-Item $sourceAudit -Destination "$archiveDir\sbscAudit"
          }
      
          if (Test-Path $sourceCustomer) {
            Move-Item $sourceCustomer -Destination "$archiveDir\sbscCustomer"
          }
      
          # Git config
          & "$gitPath\git.exe" config user.email "action@github.com"
          & "$gitPath\git.exe" config user.name "GitHub Action"
      
          # Commit and push changes
          & "$gitPath\git.exe" add .
          try {
            & "$gitPath\git.exe" commit -m "Archive migration files $timestamp [skip ci]"
            & "$gitPath\git.exe" push
          } catch {
            Write-Host "Nothing to commit. Skipping push."
          }
